package NewSolution.a_model;

/*Generated by MPS */

import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.net.URLEncoder;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.URI;
import java.net.http.HttpResponse;
import java.io.IOException;

public class map_Definition {
  public static void main(String[] args) {
    String method;
    String url;
    HashMap<String, String> body = new HashMap<String, String>();
    HashMap<String, String> params = new HashMap<String, String>();
    HashMap<String, String> header = new HashMap<String, String>();
    Integer timeout;
    map_Definition obj = new map_Definition();

    method = "GET";
    url = "https://showcase.api.linx.twenty57.net/UnixTime/fromunixtimestamp";
    body.clear();
    params.clear();
    params.put("unixtimestamp", "1549892280");
    header.clear();
    header.put("testheader", "headervalue");
    timeout = 1000;
    obj.getResponse(method, url, body, params, header, timeout);
    method = "POST";
    url = "https://showcase.api.linx.twenty57.net/UnixTime/fromunixtimestamp";
    body.clear();
    body.put("UnixTimeStamp", "1589772280");
    body.put("Timezone", "+3");
    params.clear();
    header.clear();
    header.put("content-type", "application/json; charset=UTF-8");
    timeout = 500;
    obj.getResponse(method, url, body, params, header, timeout);
  }

  private void getResponse(String method, String url, HashMap<String, String> body, HashMap<String, String> params, HashMap<String, String> header, Integer timeout) {
    List<String> p_list = new ArrayList<String>();
    for (String key : params.keySet()) {
      String val = params.get(key);
      p_list.add(URLEncoder.encode(key) + "=" + URLEncoder.encode(val));
    }
    String p = String.join("&", p_list);
    if (!(p.isEmpty())) {
      url = url + "?" + p;
    }
    Gson bd = new GsonBuilder().create();
    String boddy = bd.toJson(body);
    try {
      HttpClient client = HttpClient.newHttpClient();
      HttpRequest.Builder request = HttpRequest.newBuilder().uri(URI.create(url));
      request.method(method, HttpRequest.BodyPublishers.ofString(boddy));
      for (String key : header.keySet()) {
        request.header(key, header.get(key));
      }
      HttpRequest req = request.build();
      HttpResponse<String> response = client.send(req, HttpResponse.BodyHandlers.ofString());
      System.out.print("REQUEST URL: ");
      System.out.println(req.uri());
      System.out.print("RESPONSE STATUS: ");
      System.out.println(response.statusCode());
      System.out.println("RESPONSE BODY: ");
      System.out.println(response.body());
      System.out.println(" ");
    } catch (IOException e) {
    } catch (InterruptedException e) {
    }
  }
}
