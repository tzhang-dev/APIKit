package NewSolution.a_model;

/*Generated by MPS */

import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.net.URLEncoder;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.URI;
import java.time.Duration;
import java.net.http.HttpResponse;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.net.http.HttpConnectTimeoutException;

public class map_Definition {
  public static void main(String[] args) {
    String method;
    String url;
    HashMap<String, String> body = new HashMap<String, String>();
    HashMap<String, String> params = new HashMap<String, String>();
    HashMap<String, String> header = new HashMap<String, String>();
    Integer timeout;
    map_Definition obj = new map_Definition();

    method = "GET";
    url = "https://showcase.api.linx.twenty57.net/UnixTime/fromunixtimestamp";
    body.clear();
    params.clear();
    params.put("unixtimestamp", "1549892280");
    header.clear();
    header.put("testheader", "headervalue");
    timeout = 1000;
    System.out.println("Running Configuration: " + "datetime");
    obj.getResponse(method, url, body, params, header, timeout);
    method = "GET";
    url = "https://npiregistry.cms.hhs.gov/api/";
    body.clear();
    params.clear();
    params.put("city", "Rockville");
    params.put("enumeration_type", "NPI-1");
    params.put("limit", "1");
    params.put("state", "MD");
    params.put("first_name", "John");
    params.put("version", "2.1");
    header.clear();
    timeout = 1000;
    System.out.println("Running Configuration: " + "NIPPES");
    obj.getResponse(method, url, body, params, header, timeout);
    method = "POST";
    url = "https://showcase.api.linx.twenty57.net/UnixTime/fromunixtimestamp";
    body.clear();
    body.put("UnixTimeStamp", "1589772280");
    params.clear();
    header.clear();
    header.put("content-type", "application/json; charset=UTF-8");
    timeout = 500;
    System.out.println("Running Configuration: " + "datetimepostjson");
    obj.getResponse(method, url, body, params, header, timeout);
    method = "GET";
    url = "https://baconipsum.com/api/";
    body.clear();
    params.clear();
    params.put("type", "all-meat");
    params.put("paras", "2");
    params.put("start-with-lorem", "1");
    header.clear();
    timeout = 1000;
    System.out.println("Running Configuration: " + "text_generator");
    obj.getResponse(method, url, body, params, header, timeout);
    method = "GET";
    url = "https://npiregistry.cms.hhs.gov/api/";
    body.clear();
    params.clear();
    params.put("city", "Rockville");
    params.put("enumeration_type", "NPI-1");
    params.put("limit", "1");
    params.put("state", "MD");
    params.put("first_name", "John");
    params.put("version", "2.1");
    header.clear();
    timeout = 1;
    System.out.println("Running Configuration: " + "timeout_test");
    obj.getResponse(method, url, body, params, header, timeout);
  }

  private void getResponse(String method, String url, HashMap<String, String> body, HashMap<String, String> params, HashMap<String, String> header, Integer timeout) {
    List<String> p_list = new ArrayList<String>();
    for (String key : params.keySet()) {
      String val = params.get(key);
      p_list.add(URLEncoder.encode(key) + "=" + URLEncoder.encode(val));
    }
    String p = String.join("&", p_list);
    if (!(p.isEmpty())) {
      url = url + "?" + p;
    }
    Gson bd = new GsonBuilder().create();
    String boddy = bd.toJson(body);
    try {
      HttpClient client = HttpClient.newHttpClient();
      HttpRequest.Builder request = HttpRequest.newBuilder().uri(URI.create(url));
      request.method(method, HttpRequest.BodyPublishers.ofString(boddy));
      request.timeout(Duration.ofMillis(timeout));
      for (String key : header.keySet()) {
        request.header(key, header.get(key));
      }
      HttpRequest req = request.build();
      System.out.print("REQUEST URL: ");
      System.out.println(req.uri());
      HttpResponse<String> response = client.send(req, HttpResponse.BodyHandlers.ofString());
      String body_str;
      try {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        JsonObject jsonObject = JsonParser.parseString(response.body().toString()).getAsJsonObject();
        body_str = gson.toJson(jsonObject);
      } catch (IllegalStateException e) {
        body_str = response.body().toString();
      } catch (Exception e) {
        body_str = response.body().toString();
      }
      System.out.print("RESPONSE STATUS: ");
      System.out.println(response.statusCode());
      System.out.println("RESPONSE BODY: ");
      System.out.println(body_str);
    } catch (HttpConnectTimeoutException e) {
      System.out.println("REQUEST FAILED: TIMEOUT");
    } catch (IllegalArgumentException e) {
      System.out.print("BUILD REQUEST FAILED: ");
      System.out.print(e.getMessage());
    } catch (Exception e) {
      System.out.print("FATAL ERROR: ");
      System.out.println(e.getMessage());
    } finally {
      System.out.println(" ");
    }
  }
}
